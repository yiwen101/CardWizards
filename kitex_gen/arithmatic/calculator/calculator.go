// Code generated by Kitex v0.5.2. DO NOT EDIT.

package calculator

import (
	arithmatic "github.com/yiwen101/TiktokXOrbital-CardWizards/kitex_gen/arithmatic"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return calculatorServiceInfo
}

var calculatorServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Calculator"
	handlerType := (*arithmatic.Calculator)(nil)
	methods := map[string]kitex.MethodInfo{
		"Add":      kitex.NewMethodInfo(addHandler, newCalculatorAddArgs, newCalculatorAddResult, false),
		"Subtract": kitex.NewMethodInfo(subtractHandler, newCalculatorSubtractArgs, newCalculatorSubtractResult, false),
		"Multiply": kitex.NewMethodInfo(multiplyHandler, newCalculatorMultiplyArgs, newCalculatorMultiplyResult, false),
		"Divide":   kitex.NewMethodInfo(divideHandler, newCalculatorDivideArgs, newCalculatorDivideResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "arithmatic",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func addHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*arithmatic.CalculatorAddArgs)
	realResult := result.(*arithmatic.CalculatorAddResult)
	success, err := handler.(arithmatic.Calculator).Add(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCalculatorAddArgs() interface{} {
	return arithmatic.NewCalculatorAddArgs()
}

func newCalculatorAddResult() interface{} {
	return arithmatic.NewCalculatorAddResult()
}

func subtractHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*arithmatic.CalculatorSubtractArgs)
	realResult := result.(*arithmatic.CalculatorSubtractResult)
	success, err := handler.(arithmatic.Calculator).Subtract(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCalculatorSubtractArgs() interface{} {
	return arithmatic.NewCalculatorSubtractArgs()
}

func newCalculatorSubtractResult() interface{} {
	return arithmatic.NewCalculatorSubtractResult()
}

func multiplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*arithmatic.CalculatorMultiplyArgs)
	realResult := result.(*arithmatic.CalculatorMultiplyResult)
	success, err := handler.(arithmatic.Calculator).Multiply(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCalculatorMultiplyArgs() interface{} {
	return arithmatic.NewCalculatorMultiplyArgs()
}

func newCalculatorMultiplyResult() interface{} {
	return arithmatic.NewCalculatorMultiplyResult()
}

func divideHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*arithmatic.CalculatorDivideArgs)
	realResult := result.(*arithmatic.CalculatorDivideResult)
	success, err := handler.(arithmatic.Calculator).Divide(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCalculatorDivideArgs() interface{} {
	return arithmatic.NewCalculatorDivideArgs()
}

func newCalculatorDivideResult() interface{} {
	return arithmatic.NewCalculatorDivideResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Add(ctx context.Context, request *arithmatic.Request) (r *arithmatic.Response, err error) {
	var _args arithmatic.CalculatorAddArgs
	_args.Request = request
	var _result arithmatic.CalculatorAddResult
	if err = p.c.Call(ctx, "Add", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Subtract(ctx context.Context, request *arithmatic.Request) (r *arithmatic.Response, err error) {
	var _args arithmatic.CalculatorSubtractArgs
	_args.Request = request
	var _result arithmatic.CalculatorSubtractResult
	if err = p.c.Call(ctx, "Subtract", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Multiply(ctx context.Context, request *arithmatic.Request) (r *arithmatic.Response, err error) {
	var _args arithmatic.CalculatorMultiplyArgs
	_args.Request = request
	var _result arithmatic.CalculatorMultiplyResult
	if err = p.c.Call(ctx, "Multiply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Divide(ctx context.Context, request *arithmatic.Request) (r *arithmatic.Response, err error) {
	var _args arithmatic.CalculatorDivideArgs
	_args.Request = request
	var _result arithmatic.CalculatorDivideResult
	if err = p.c.Call(ctx, "Divide", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
