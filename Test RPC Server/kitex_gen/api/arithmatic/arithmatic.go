// Code generated by Kitex v0.5.2. DO NOT EDIT.

package arithmatic

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	api "testServer/kitex_gen/api"
)

func serviceInfo() *kitex.ServiceInfo {
	return arithmaticServiceInfo
}

var arithmaticServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Arithmatic"
	handlerType := (*api.Arithmatic)(nil)
	methods := map[string]kitex.MethodInfo{
		"Add": kitex.NewMethodInfo(addHandler, newArithmaticAddArgs, newArithmaticAddResult, false),
		"Sub": kitex.NewMethodInfo(subHandler, newArithmaticSubArgs, newArithmaticSubResult, false),
		"Mul": kitex.NewMethodInfo(mulHandler, newArithmaticMulArgs, newArithmaticMulResult, false),
		"Div": kitex.NewMethodInfo(divHandler, newArithmaticDivArgs, newArithmaticDivResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func addHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ArithmaticAddArgs)
	realResult := result.(*api.ArithmaticAddResult)
	success, err := handler.(api.Arithmatic).Add(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArithmaticAddArgs() interface{} {
	return api.NewArithmaticAddArgs()
}

func newArithmaticAddResult() interface{} {
	return api.NewArithmaticAddResult()
}

func subHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ArithmaticSubArgs)
	realResult := result.(*api.ArithmaticSubResult)
	success, err := handler.(api.Arithmatic).Sub(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArithmaticSubArgs() interface{} {
	return api.NewArithmaticSubArgs()
}

func newArithmaticSubResult() interface{} {
	return api.NewArithmaticSubResult()
}

func mulHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ArithmaticMulArgs)
	realResult := result.(*api.ArithmaticMulResult)
	success, err := handler.(api.Arithmatic).Mul(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArithmaticMulArgs() interface{} {
	return api.NewArithmaticMulArgs()
}

func newArithmaticMulResult() interface{} {
	return api.NewArithmaticMulResult()
}

func divHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.ArithmaticDivArgs)
	realResult := result.(*api.ArithmaticDivResult)
	success, err := handler.(api.Arithmatic).Div(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArithmaticDivArgs() interface{} {
	return api.NewArithmaticDivArgs()
}

func newArithmaticDivResult() interface{} {
	return api.NewArithmaticDivResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Add(ctx context.Context, req *api.Request) (r *api.Response, err error) {
	var _args api.ArithmaticAddArgs
	_args.Req = req
	var _result api.ArithmaticAddResult
	if err = p.c.Call(ctx, "Add", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Sub(ctx context.Context, req *api.Request) (r *api.Response, err error) {
	var _args api.ArithmaticSubArgs
	_args.Req = req
	var _result api.ArithmaticSubResult
	if err = p.c.Call(ctx, "Sub", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Mul(ctx context.Context, req *api.Request) (r *api.Response, err error) {
	var _args api.ArithmaticMulArgs
	_args.Req = req
	var _result api.ArithmaticMulResult
	if err = p.c.Call(ctx, "Mul", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Div(ctx context.Context, req *api.Request) (r *api.Response, err error) {
	var _args api.ArithmaticDivArgs
	_args.Req = req
	var _result api.ArithmaticDivResult
	if err = p.c.Call(ctx, "Div", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
