// Code generated by Kitex v0.5.2. DO NOT EDIT.

package arithmatic

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	arithmatic "github.com/yiwen101/CardWizards/TestRPC/kitex_gen/arithmatic"
)

func serviceInfo() *kitex.ServiceInfo {
	return arithmaticServiceInfo
}

var arithmaticServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "arithmatic"
	handlerType := (*arithmatic.Arithmatic)(nil)
	methods := map[string]kitex.MethodInfo{
		"Add":           kitex.NewMethodInfo(addHandler, newArithmaticAddArgs, newArithmaticAddResult, false),
		"Subtract":      kitex.NewMethodInfo(subtractHandler, newArithmaticSubtractArgs, newArithmaticSubtractResult, false),
		"Multiply":      kitex.NewMethodInfo(multiplyHandler, newArithmaticMultiplyArgs, newArithmaticMultiplyResult, false),
		"Divide":        kitex.NewMethodInfo(divideHandler, newArithmaticDivideArgs, newArithmaticDivideResult, false),
		"TestValidator": kitex.NewMethodInfo(testValidatorHandler, newArithmaticTestValidatorArgs, newArithmaticTestValidatorResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "arithmatic",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func addHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*arithmatic.ArithmaticAddArgs)
	realResult := result.(*arithmatic.ArithmaticAddResult)
	success, err := handler.(arithmatic.Arithmatic).Add(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArithmaticAddArgs() interface{} {
	return arithmatic.NewArithmaticAddArgs()
}

func newArithmaticAddResult() interface{} {
	return arithmatic.NewArithmaticAddResult()
}

func subtractHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*arithmatic.ArithmaticSubtractArgs)
	realResult := result.(*arithmatic.ArithmaticSubtractResult)
	success, err := handler.(arithmatic.Arithmatic).Subtract(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArithmaticSubtractArgs() interface{} {
	return arithmatic.NewArithmaticSubtractArgs()
}

func newArithmaticSubtractResult() interface{} {
	return arithmatic.NewArithmaticSubtractResult()
}

func multiplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*arithmatic.ArithmaticMultiplyArgs)
	realResult := result.(*arithmatic.ArithmaticMultiplyResult)
	success, err := handler.(arithmatic.Arithmatic).Multiply(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArithmaticMultiplyArgs() interface{} {
	return arithmatic.NewArithmaticMultiplyArgs()
}

func newArithmaticMultiplyResult() interface{} {
	return arithmatic.NewArithmaticMultiplyResult()
}

func divideHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*arithmatic.ArithmaticDivideArgs)
	realResult := result.(*arithmatic.ArithmaticDivideResult)
	success, err := handler.(arithmatic.Arithmatic).Divide(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArithmaticDivideArgs() interface{} {
	return arithmatic.NewArithmaticDivideArgs()
}

func newArithmaticDivideResult() interface{} {
	return arithmatic.NewArithmaticDivideResult()
}

func testValidatorHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*arithmatic.ArithmaticTestValidatorArgs)
	realResult := result.(*arithmatic.ArithmaticTestValidatorResult)
	success, err := handler.(arithmatic.Arithmatic).TestValidator(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArithmaticTestValidatorArgs() interface{} {
	return arithmatic.NewArithmaticTestValidatorArgs()
}

func newArithmaticTestValidatorResult() interface{} {
	return arithmatic.NewArithmaticTestValidatorResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Add(ctx context.Context, request *arithmatic.Request) (r *arithmatic.Response, err error) {
	var _args arithmatic.ArithmaticAddArgs
	_args.Request = request
	var _result arithmatic.ArithmaticAddResult
	if err = p.c.Call(ctx, "Add", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Subtract(ctx context.Context, request *arithmatic.Request) (r *arithmatic.Response, err error) {
	var _args arithmatic.ArithmaticSubtractArgs
	_args.Request = request
	var _result arithmatic.ArithmaticSubtractResult
	if err = p.c.Call(ctx, "Subtract", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Multiply(ctx context.Context, request *arithmatic.Request) (r *arithmatic.Response, err error) {
	var _args arithmatic.ArithmaticMultiplyArgs
	_args.Request = request
	var _result arithmatic.ArithmaticMultiplyResult
	if err = p.c.Call(ctx, "Multiply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Divide(ctx context.Context, request *arithmatic.Request) (r *arithmatic.Response, err error) {
	var _args arithmatic.ArithmaticDivideArgs
	_args.Request = request
	var _result arithmatic.ArithmaticDivideResult
	if err = p.c.Call(ctx, "Divide", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestValidator(ctx context.Context, request *arithmatic.TestValidator) (r *arithmatic.Response, err error) {
	var _args arithmatic.ArithmaticTestValidatorArgs
	_args.Request = request
	var _result arithmatic.ArithmaticTestValidatorResult
	if err = p.c.Call(ctx, "TestValidator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
