// Code generated by hertz generator.

package main

import (
	"bytes"
	"context"

	//"fmt"
	"log"
	"net/http"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/generic"

	"github.com/kitex-contrib/registry-nacos/resolver"
	handler "github.com/yiwen101/CardWizards/biz/handler"
)

// customizeRegister registers customize routers.
func customizedRegister(r *server.Hertz) {
	// todo: for other methods? post, head etcs
	r.GET("/ping", handler.Ping)
	r.GET("/gateway/:serviceName/*serviceRoute",
		func(ctx context.Context, c *app.RequestContext) {
			//Router:
			serviceName := c.Param("serviceName")
			// todo: if serviceName is not in the map, return a http response with error message
			methodName := c.Param("serviceRoute")
			//todo: if methodName is not in the map, return a http response with error message

			//return a http resonse with serviceName and methodName as json field

			// if servicename = arith and method name = add, then call the kitex client
			if serviceName == "arith" && methodName == "add" {
				resolved, err := resolver.NewDefaultNacosResolver()
				if err != nil {
					panic(err)
				}

				// end of router

				// Service: poc/make generic call;

				// poc:
				//client:
				/*

					client3, err := calculator.NewClient(
						"arith",
						client.WithHostPorts("0.0.0.0:8888"),
						client.WithResolver(resolved),
					)
					if err != nil {
						log.Fatal(err)
					}

					// request
					req3 := &arithmatic.Request{}
					req3.FirstArguement = 1
					req3.SecondArguement = 2

					// make call
					//todo: how to make call based on the method name

					resp3, err := client3.Add(context.Background(), req3)
					if err != nil {
						log.Fatal(err)
					}
					c.JSON(http.StatusOK, utils.H{
						"message":         "not from generic client",
						"firstArguement":  resp3.FirstArguement,
						"secondArguement": resp3.SecondArguement,
						"result":          resp3.Result_,
					})

				*/

				// generic: first, make sure idl fulfill the requirement
				//read the idl file and generate the provider
				p, err := generic.NewThriftFileProvider("IDL/arithmatic.thrift")
				if err != nil {
					log.Println("error in generic.NewThriftFileProvider")
					panic(err)
				}
				//construct a generic httprequest with the provider
				g, err := generic.HTTPThriftGeneric(p)
				if err != nil {
					log.Println("error in generic.HTTPThriftGeneric")
					panic(err)
				}
				//make a generic client with the generic httprequest
				cli, err := genericclient.NewClient(
					"arith",
					g, client.WithHostPorts("0.0.0.0:8889"),
					client.WithResolver(resolved),
				)

				if err != nil {
					log.Println("error in genericclient.NewClient")
					panic(err)
				}
				// optional: 构建一个http request
				//string(c.Request.URI().Path()) == /gateway/arith/add. get function lookup failed
				httpReq, err := http.NewRequest(http.MethodGet, "/arith/add", bytes.NewBuffer(c.Request.Body()))
				log.Println("http request is: ", httpReq)
				log.Println("http request body is: ", c.Request.Body())
				log.Println("http request url is: ", c.Request.RequestURI())

				if err != nil {
					log.Println("error in constructing http request")
					panic(err)
				}

				// 将http request转换成generic request
				customReq, err := generic.FromHTTPRequest(httpReq)
				if err != nil {
					log.Println("error in converting http request to generic request")
					panic(err)
				}

				// call
				genericResponse, err := cli.GenericCall(ctx, "", customReq)
				if err != nil {
					log.Println("error in generic call")
					panic(err)
				}

				resp := genericResponse.(*generic.HTTPResponse)
				// return response
				c.JSON(int(resp.StatusCode), resp.Body)

			}

			merchant_id := c.PostForm("merchant_id")

			c.JSON(http.StatusOK, utils.H{
				"serviceName":         serviceName,
				"methodName":          methodName,
				"parameter":           merchant_id,
				"url.queryargs":       c.Request.URI().QueryArgs(),
				"url.querystring":     c.Request.URI().QueryString(),
				"url.path":            string(c.Request.URI().Path()),
				"keys":                c.Keys,
				"request":             c.Request,
				"request.body":        c.Request.Body(),
				"request.header":      c.Request.Header,
				"reqqust.body string": string(c.Request.Body()),
			})

			//c.String(consts.StatusOK, fmt.Sprintf("%v", c.Request.Body()))

		})
}

/*
func registerGateway(r *server.Hertz) {
	group := r.Group("/APIgateway")
} */
