// Code generated by hertz generator.

package main

import (
	"context"
	"log"
	"net/http"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/kitex/client"
	"github.com/kitex-contrib/registry-nacos/resolver"
	handler "github.com/yiwen101/CardWizards/biz/handler"
	"github.com/yiwen101/CardWizards/kitex_gen/arithmatic"
	"github.com/yiwen101/CardWizards/kitex_gen/arithmatic/calculator"
)

// customizeRegister registers customize routers.
func customizedRegister(r *server.Hertz) {
	r.GET("/ping", handler.Ping)
	r.GET("/gateway/:serviceName/*serviceRoute",
		func(ctx context.Context, c *app.RequestContext) {
			serviceName := c.Param("serviceName")
			// todo: if serviceName is not in the map, return a http response with error message
			methodName := c.Param("serviceRoute")
			//todo: if methodName is not in the map, return a http response with error message

			//return a http resonse with serviceName and methodName as json field

			// if servicename = arith and method name = add, then call the kitex client
			if serviceName == "arith" && methodName == "add" {
				r, err := resolver.NewDefaultNacosResolver()
				if err != nil {
					panic(err)
				}

				client3, err := calculator.NewClient(
					"arith",
					client.WithHostPorts("0.0.0.0:8888"),
					client.WithResolver(r),
				)
				if err != nil {
					log.Fatal(err)
				}
				req3 := &arithmatic.Request{}
				// set the first arguement of req3 to 1, second arguement to 2
				req3.FirstArguement = 1
				req3.SecondArguement = 2
				resp3, err := client3.Add(context.Background(), req3)
				if err != nil {
					log.Fatal(err)
				}
				c.JSON(http.StatusOK, utils.H{
					"firstArguement":  resp3.FirstArguement,
					"secondArguement": resp3.SecondArguement,
					"result":          resp3.Result_,
				})
			}

			c.JSON(http.StatusOK, utils.H{
				"serviceName": serviceName,
				"methodName":  methodName,
			})
		})
}

/*
func registerGateway(r *server.Hertz) {
	group := r.Group("/APIgateway")
} */
