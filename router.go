// Code generated by hertz generator.

package main

import (
	"context"

	//"fmt"
	"log"
	"net/http"

	"github.com/cloudwego/hertz/pkg/app"
	//"github.com/cloudwego/hertz/pkg/app/client/loadbalance"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/kitex/pkg/generic"

	handler "github.com/yiwen101/CardWizards/biz/handler"
	service "github.com/yiwen101/CardWizards/service"
)

// customizeRegister registers customize routers.
func customizedRegister(r *server.Hertz) {
	// todo: write documentation, differentiate build time and run time;
	// todo: for other methods? post, head etcs
	// question: how to check parameters are valid?
	//question: how to check the service name and method name are valid?
	r.GET("/ping", handler.Ping)
	r.GET("/:serviceName/*serviceRoute", handlerFor(http.MethodGet))
}

func handlerFor(method string) func(ctx context.Context, c *app.RequestContext) {
	return func(ctx context.Context, c *app.RequestContext) {

		serviceName := c.Param("serviceName")
		// toOptimise: if serviceName is not in the map, return a http response with error message
		if !service.HasService(serviceName) {
			c.JSON(http.StatusNotFound, "service not found")
			return
		} else {

			//todo: if methodName is not in the map, return a http response with error message
			cli, err := service.GetClient(serviceName)
			if err != nil {
				log.Println("error in getting client")
				panic(err)
			}

			// Todo: find a mean to bind and validate the parameters
			//string(c.Request.URI().Path()) == /gateway/arith/add. get function lookup failed; +c.URI().QueryArgs().String()
			log.Println("http request url is: " + c.Request.URI().String())

			// call
			genericResponse, err := cli.GenericCall(ctx, "", service.BuildRequest(c, method))
			if err != nil {
				log.Println("error in generic call")
				panic(err)
			}

			resp := genericResponse.(*generic.HTTPResponse)
			// return response
			c.JSON(int(resp.StatusCode), resp.Body)
		}
	}
}

/*
func registerGateway(r *server.Hertz) {
	group := r.Group("/APIgateway")
} */
